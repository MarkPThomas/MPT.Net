// ***********************************************************************
// Assembly         : MPT.CSI.OOAPI
// Author           : Mark Thomas
// Created          : 11-30-2018
//
// Last Modified By : Mark Thomas
// Last Modified On : 12-01-2018
// ***********************************************************************
// <copyright file="Area.cs" company="">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System.Collections.Generic;
using System.Collections.ObjectModel;
using MPT.CSI.Serialize.Models.Components.Analysis;
using MPT.CSI.Serialize.Models.Components.Definitions.Abstractions;
using MPT.CSI.Serialize.Models.Components.Definitions.CrossSections.Areas;
using MPT.CSI.Serialize.Models.Components.Definitions.Materials;
using MPT.CSI.Serialize.Models.Components.ProjectSettings;
using MPT.CSI.Serialize.Models.Helpers;
using MPT.CSI.Serialize.Models.Helpers.Definitions.Sections.AreaSections;
using MPT.CSI.Serialize.Models.Helpers.Loads.Assignments;

namespace MPT.CSI.Serialize.Models.Components.StructureLayout
{
    /// <summary>
    /// Class Area.
    /// </summary>
    /// <seealso cref="StructureObjectWithCrossSection{T}" />
    public class Area : StructureObjectWithCrossSection<AreaSection>
    {
        #region Fields & Properties
        /// <summary>
        /// The analysis results
        /// </summary>
        protected AreaResults _analysisResults;
        /// <summary>
        /// Gets or sets the analysis results.
        /// </summary>
        /// <value>The results.</value>
        public virtual AreaResults AnalysisResults => _analysisResults ?? (_analysisResults = new AreaResults(Name));

        //private ShearWallDesignResults _shearWallDesignResults;
        //private SlabDesignResults _slabDesignResults;

        //public ShearWallDesignResults ShearWallDesignResults => _shearWallDesignResults ?? (_shearWallDesignResults = new ShearWallDesignResults(Name));

        //public SlabDesignResults ShearWallDesignResults => _slabDesignResults ?? (_slabDesignResults = new SlabDesignResults(Name));

        /// <summary>
        /// The is opening
        /// </summary>
        protected bool? _isOpening;
        /// <summary>
        /// True: Specified area object is an opening.
        /// </summary>
        /// <value><c>true</c> if this instance is opening; otherwise, <c>false</c>.</value>
        public virtual bool IsOpening => _isOpening ?? false;

        /// <summary>
        /// The design orientation
        /// </summary>
        protected eAreaDesignOrientation _designOrientation;
        /// <summary>
        /// Gets or sets the design orientation.
        /// </summary>
        /// <value>The design orientation.</value>
        public virtual eAreaDesignOrientation DesignOrientation
        {
            get => _designOrientation;
            internal set => _designOrientation = value;
        }

        /// <summary>
        /// The uniform loads
        /// </summary>
        protected List<AreaLoadUniform> _uniformLoads;
        /// <summary>
        /// Gets or sets the uniform loads.
        /// </summary>
        /// <value>The uniform loads.</value>
        public virtual ReadOnlyCollection<AreaLoadUniform> UniformLoads => new ReadOnlyCollection<AreaLoadUniform>(_uniformLoads);

        /// <summary>
        /// The uniform to frame loads
        /// </summary>
        protected List<AreaLoadUniformToFrame> _uniformToFrameLoads;
        /// <summary>
        /// Gets or sets the uniform to frame loads.
        /// </summary>
        /// <value>The uniform to frame loads.</value>
        public virtual ReadOnlyCollection<AreaLoadUniformToFrame> UniformToFrameLoads => new ReadOnlyCollection<AreaLoadUniformToFrame>(_uniformToFrameLoads);

        /// <summary>
        /// The wind pressure loads
        /// </summary>
        protected List<AreaLoadWindPressure> _windPressureLoads;
        /// <summary>
        /// Gets or sets the wind pressure loads.
        /// </summary>
        /// <value>The wind pressure loads.</value>
        public virtual ReadOnlyCollection<AreaLoadWindPressure> WindPressureLoads => new ReadOnlyCollection<AreaLoadWindPressure>(_windPressureLoads);

        /// <summary>
        /// Gets or sets the area modifier.
        /// </summary>
        /// <value>The area modifier.</value>
        public virtual AreaModifier AreaModifier { get; internal set; }

        /// <summary>
        /// The has edge constraints
        /// </summary>
        protected bool? _hasEdgeConstraints;
        /// <summary>
        /// True: An automatic edge constraint is generated by the program for the object in the analysis model.
        /// </summary>
        /// <value><c>true</c> if this instance has edge constraints; otherwise, <c>false</c>.</value>
        public virtual bool HasEdgeConstraints => _hasEdgeConstraints?? false;

        /// <summary>
        /// The selected edge booleans
        /// </summary>
        protected List<bool> _selectedEdgeBooleans;
        /// <summary>
        /// Selected status for area object edges.
        /// True: The specified area object edge is selected;
        /// Selected(0) = Selected status for edge 1;
        /// Selected(1) = Selected status for edge 2;
        /// Selected(n) = Selected status for edge(n + 1)
        /// </summary>
        /// <value>The selected edge booleans.</value>
        public virtual ReadOnlyCollection<bool> SelectedEdgeBooleans => new ReadOnlyCollection<bool>(_selectedEdgeBooleans);
        #endregion

        #region Initialization
        /// <summary>
        /// Factories the specified unique name.
        /// </summary>
        /// <param name="componentsProperties">The components properties.</param>
        /// <param name="uniqueName">Name of the unique.</param>
        /// <returns>Area.</returns>
        internal static Area Factory(
            StructureComponentsProperties<AreaSection> componentsProperties, 
            string uniqueName)
        {
            Area item = new Area(componentsProperties, uniqueName);
            return item;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        /// <param name="componentsProperties">The components properties.</param>
        /// <param name="name">The name.</param>
        internal Area(
            StructureComponentsProperties<AreaSection> componentsProperties, 
            string name) : base(componentsProperties, name) { }
        #endregion


        #region Creation
        /// <summary>
        /// Adds a new object whose corner points are at the specified coordinates.
        /// Returns the name that the program ultimately assigns for the object.
        /// If no <paramref name="uniqueName" /> is specified, the program assigns a default name to the object.
        /// If a <paramref name="uniqueName" /> is specified and that name is not used for another object, the <paramref name="uniqueName" /> is assigned to the object; otherwise a default name is assigned to the object.
        /// </summary>
        /// <param name="componentsProperties">The components properties.</param>
        /// <param name="coordinates">Coordinates for the corner points of the object.
        /// At least three coordinates are required.</param>
        /// <param name="propertyName">This is either Default or the name of a defined property.
        /// If it is Default, the program assigns a default solid property to the object.
        /// If it is the name of a defined property, that property is assigned to the object.</param>
        /// <param name="uniqueName">This is an optional user specified name for the object.
        /// If a <paramref name="uniqueName" /> is specified and that name is already used for another object of the same type, the program ignores the <paramref name="uniqueName" />.</param>
        /// <returns>Area.</returns>
        internal static Area AddByCoordinate(
            StructureComponentsProperties<AreaSection> componentsProperties,
            List<Coordinate3DCartesian> coordinates,
            string propertyName = Constants.DEFAULT,
            string uniqueName = "")
        {
            return AddByPoint(componentsProperties,
                ConvertCoordsToPoints(componentsProperties, coordinates),
                propertyName,
                uniqueName);
        }


        /// <summary>
        /// Adds a new object whose corner points are specified by name.
        /// Returns the name that the program ultimately assigns for the object.
        /// If no <paramref name="uniqueName" /> is specified, the program assigns a default name to the object.
        /// If a <paramref name="uniqueName" /> is specified and that name is not used for another object, the <paramref name="uniqueName" /> is assigned to the object; otherwise a default name is assigned to the object.
        /// </summary>
        /// <param name="componentsProperties">The components properties.</param>
        /// <param name="points">The point objects that define the corner points of the added object.
        /// At least three points are required.</param>
        /// <param name="propertyName">This is either Default or the name of a defined solid property.
        /// If it is Default, the program assigns a default solid property to the solid object.
        /// If it is the name of a defined property, that property is assigned to the object.</param>
        /// <param name="uniqueName">This is an optional user specified name for the object.
        /// If a <paramref name="uniqueName" /> is specified and that name is already used for another object of the same type, the program ignores the <paramref name="uniqueName" />.</param>
        /// <returns>Area.</returns>
        internal static Area AddByPoint(
            StructureComponentsProperties<AreaSection> componentsProperties,
            List<Point> points,
            string propertyName = Constants.DEFAULT,
            string uniqueName = "")
        {
            Area item = Factory(componentsProperties, uniqueName);
            item._sectionName = propertyName;
            item._objectPoints = new List<Point>(points);

            List<string> pointNames = new List<string>();
            foreach (var point in points)
            {
                pointNames.Add(point.Name);
            }
            item.PointNames = pointNames;

            return item;
        }
        #endregion

        #region Cross-Section & Material Properties
        /// <summary>
        /// Assigns mass per unit length to objects.
        /// </summary>
        /// <param name="value">The mass per unit length assigned to the object. [M/L]</param>
        /// <param name="replace">True: All existing mass assignments to the object are removed before assigning the specified mass.
        /// False: The specified mass is added to any existing mass already assigned to the object.</param>
        public override void SetMass(double value, bool replace)
        {
            setMass(value, replace);
        }

        /// <summary>
        /// Deletes all mass assignments for the specified objects.
        /// </summary>
        public override void DeleteMass()
        {
            deleteMass();
        }



        /// <summary>
        /// Returns the material overwrite assigned, if any.
        /// These overwrite the material assigned to the cross section used in the object.
        /// The material property name is indicated as None if there is no material overwrite assignment.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string GetMaterialOverwriteName()
        {
            return getMaterialOverwriteName();
        }

        /// <summary>
        /// Adds the material overwrite assignment for objects.
        /// These overwrite the material assigned to the cross section used in the object.
        /// </summary>
        /// <param name="material">An existing material property.</param>
        public override void AddMaterialOverwrite(Material material)
        {
            setMaterialOverwrite(material);
        }

        /// <summary>
        /// Removes the material overwrite assignment for objects.
        /// These overwrite the material assigned to the cross section used in the object.
        /// </summary>
        public override void RemoveMaterialOverwrite()
        {
            setMaterialOverwrite(null);
        }


        /// <summary>
        /// Returns the section property name assigned.
        /// This item is None if there is no section property assigned to the element/object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string GetSectionName()
        {
            return getSectionName();
        }

        /// <summary>
        /// Assigns the section property to a frame object.
        /// </summary>
        /// <param name="section">The section.</param>
        public void SetSection(AreaSection section)
        {
            if (section == null) return;
            setSection(section);
        }

        #endregion

        #region Design
        /// <summary>
        /// Retrieves the pier label assignments of an object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string GetPierName()
        {
            return getPierName();
        }

        /// <summary>
        /// Adds the pier label assignment to the object.
        /// Any existing pier label is replaced.
        /// </summary>
        /// <param name="pier">The pier assignment.</param>
        public override void AddToPier(Pier pier)
        {
            addPier(pier);
        }

        /// <summary>
        /// Removes the pier label from the object.
        /// </summary>
        public override void RemoveFromPier()
        {
            removePier();
        }

        /// <summary>
        /// Retrieves the spandrel label assignments of an object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string GetSpandrelName()
        {
            return getSpandrelName();
        }

        /// <summary>
        /// Adds the spandrel label assignment to the object.
        /// Any existing spandrel label is replaced.
        /// </summary>
        /// <param name="spandrel">The spandrel assignment.</param>
        public override void AddToSpandrel(Spandrel spandrel)
        {
            addSpandrel(spandrel);
        }

        /// <summary>
        /// Removes the pier label from the object.
        /// </summary>
        public override void RemoveFromSpandrel()
        {
            removeSpandrel();
        }
        #endregion

        #region Loading
        // LoadTemperature
        /// <summary>
        /// Assigns temperature loads to frame objects.
        /// </summary>
        /// <param name="temperatureLoad">The temperature load.</param>
        public override void AddLoadTemperature(LoadTemperature temperatureLoad)
        {
            setLoadTemperature(temperatureLoad, replace: false);
        }

        /// <summary>
        /// Assigns temperature loads to frame objects.
        /// </summary>
        /// <param name="temperatureLoad">The temperature load.</param>
        public override void ReplaceLoadTemperature(LoadTemperature temperatureLoad)
        {
            setLoadTemperature(temperatureLoad, replace: true);
        }

        /// <summary>
        /// Deletes the temperature load assignments to the specified objects for the specified load pattern.
        /// </summary>
        /// <param name="loadPattern">The name of the load pattern associated with the load.</param>
        public override void DeleteLoadTemperature(string loadPattern)
        {
            deleteLoad(loadPattern, TemperatureLoads);
        }

        // LoadUniform
        /// <summary>
        /// Assigns uniform loads to objects.
        /// </summary>
        /// <param name="uniformLoad">The load uniform.</param>
        public virtual void AddLoadUniform(AreaLoadUniform uniformLoad)
        {
            addOrReplace(false, uniformLoad, _uniformLoads);
        }

        /// <summary>
        /// Assigns uniform loads to objects.
        /// </summary>
        /// <param name="uniformLoad">The load uniform.</param>
        public virtual void ReplaceLoadUniform(AreaLoadUniform uniformLoad)
        {
            addOrReplace(true, uniformLoad, _uniformLoads);
        }

        /// <summary>
        /// Deletes the uniform load assignments to the specified objects for the specified load pattern.
        /// </summary>
        /// <param name="loadPattern">The load pattern.</param>
        public virtual void DeleteLoadUniform(string loadPattern)
        {
            deleteLoad(loadPattern, _uniformLoads);
        }


        // LoadUniformToFrame
        /// <summary>
        /// Assigns wind pressure loads to area objects.
        /// </summary>
        /// <param name="uniformLoad">The uniform load.</param>
        public virtual void AddLoadUniformToFrame(AreaLoadUniformToFrame uniformLoad)
        {
            addOrReplace(false, uniformLoad, _uniformToFrameLoads);
        }

        /// <summary>
        /// Assigns wind pressure loads to area objects.
        /// </summary>
        /// <param name="uniformLoad">The uniform load.</param>
        public virtual void ReplaceLoadUniformToFrame(AreaLoadUniformToFrame uniformLoad)
        {
            addOrReplace(true, uniformLoad, _uniformToFrameLoads);
        }

        /// <summary>
        /// Deletes the uniform load assignments to the specified objects for the specified load pattern.
        /// </summary>
        /// <param name="loadPattern">The load pattern.</param>
        public virtual void DeleteLoadUniformToFrame(string loadPattern)
        {
            deleteLoad(loadPattern, _uniformToFrameLoads);
        }


        // LoadWindPressure
        /// <summary>
        /// Assigns wind pressure loads to area objects.
        /// </summary>
        /// <param name="windPressure">The wind pressure.</param>
        public virtual void SetLoadWindPressure(AreaLoadWindPressure windPressure)
        {
            addOrReplace(true, windPressure, _windPressureLoads);
        }

        /// <summary>
        /// Deletes the wind pressure load assignments to the specified objects for the specified load pattern.
        /// </summary>
        /// <param name="loadPattern">The load pattern.</param>
        public virtual void DeleteLoadWindPressure(string loadPattern)
        {
            deleteLoad(loadPattern, _windPressureLoads);
        }
        #endregion
    }
}
